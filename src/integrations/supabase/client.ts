// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { SUPABASE_URL, SUPABASE_ANON_KEY } from '@/lib/constants';

// Add a specific override to disable the "pushLogsToGrafana" debugging feature
const disablePushLogsToGrafana = true;

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Define custom types to handle platform_settings
export type PlatformSettings = {
  id: string;
  provider_id: string | null;
  system_name: string;
  default_language: string;
  dark_mode: boolean;
  beta_features: boolean;
  email_notifications: boolean;
  order_updates: boolean;
  user_registration_alerts: boolean;
  security_alerts: boolean;
  multi_factor_auth: boolean;
  session_timeout: number;
  password_policy: string;
  created_at: string;
  updated_at: string;
}

// Check if environment variables are available
if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
  console.error(
    'Warning: Supabase configuration might be incomplete. Using fallback values.',
    {
      url: SUPABASE_URL,
      hasKey: !!SUPABASE_ANON_KEY,
      env: import.meta.env.MODE
    }
  );
}

// Use a singleton pattern to ensure only one Supabase client is created
let supabaseInstance: any = null;

// Create Supabase client
function createSupabaseClient() {
  if (supabaseInstance) {
    return supabaseInstance;
  }

  try {
    if (!SUPABASE_URL) {
      throw new Error('SUPABASE_URL is undefined or empty');
    }
    
    if (!SUPABASE_ANON_KEY) {
      throw new Error('SUPABASE_ANON_KEY is undefined or empty');
    }
    
    supabaseInstance = createClient<Database>(
      SUPABASE_URL,
      SUPABASE_ANON_KEY,
      {
        auth: {
          persistSession: true,
          autoRefreshToken: true,
          storageKey: 'lunchwise-auth-token',
          debug: false, // Disable debug mode to prevent excess logging
        },
        global: {
          headers: {
            'X-Client-Info': 'lunchwise-app',
          },
        },
        realtime: {
          params: {
            eventsPerSecond: 1,
          },
        },
        // Disable debug logging in Supabase client
        debug: false,
      }
    );

    // Clean up any stale auth data in local storage that might cause issues
    try {
      if (typeof localStorage !== 'undefined') {
        // Only keep the main storage key as it's handled by the auth mechanism
        const currentSession = localStorage.getItem('lunchwise-auth-token');
        if (!currentSession) {
          localStorage.removeItem('supabase.auth.token');
        }
      }
    } catch (error) {
      console.error('Error cleaning up auth storage:', error);
    }

    // Original auth state change handler used to create log messages - now with debounce
    let lastAuthEventTime = 0;
    const MIN_EVENT_INTERVAL = 1000; // 1 second

    // Add an error handler to catch and prevent recursive logging
    supabaseInstance.auth.onAuthStateChange((event: string) => {
      // Debounce frequent auth events
      const now = Date.now();
      if (now - lastAuthEventTime < MIN_EVENT_INTERVAL) {
        return; // Skip this event if it's too close to the previous one
      }
      lastAuthEventTime = now;
      
      // Log only critical auth events to reduce noise
      if (['SIGNED_IN', 'SIGNED_OUT', 'USER_UPDATED'].includes(event)) {
        console.log('Auth state change:', event);
      }
      
      if (event === 'SIGNED_OUT') {
        // Clear any local storage items that might be causing issues
        try {
          localStorage.removeItem('supabase.auth.token');
          // We keep the main storage key as it's handled by the auth mechanism
        } catch (error) {
          console.error('Error cleaning up auth storage on signout:', error);
        }
      }
    });

    return supabaseInstance;
  } catch (error) {
    console.error('Failed to initialize Supabase client:', error);
    // Create a dummy client that will throw clear errors when used
    const errorMessage = `Supabase initialization failed: ${error instanceof Error ? error.message : 'Unknown error'}`;
    
    // @ts-ignore - Creating a proxy object for better error messages
    return new Proxy({}, {
      get: function(target, prop) {
        if (prop === 'auth' || prop === 'from' || prop === 'storage') {
          return new Proxy({}, {
            get: function() {
              throw new Error(errorMessage);
            }
          });
        }
        throw new Error(errorMessage);
      }
    });
  }
}

// Export the supabase client
export const supabase = createSupabaseClient();

// Patch the client to disable the problematic pushLogsToGrafana functionality
if (disablePushLogsToGrafana && supabaseInstance) {
  try {
    // @ts-ignore - Override any pushLogsToGrafana method that might exist
    if (typeof supabaseInstance.pushLogsToGrafana === 'function') {
      // @ts-ignore
      supabaseInstance.pushLogsToGrafana = () => {};
    }
    
    // Also try to intercept any telemetry methods
    // @ts-ignore
    if (supabaseInstance._telemetry) {
      // @ts-ignore
      supabaseInstance._telemetry.send = () => {};
    }
  } catch (e) {
    // Silently catch any errors in our patch attempt
  }
}
