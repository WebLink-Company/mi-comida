
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { SUPABASE_URL, SUPABASE_ANON_KEY } from '@/lib/constants';

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Define custom types to handle platform_settings
export type PlatformSettings = {
  id: string;
  provider_id: string | null;
  system_name: string;
  default_language: string;
  dark_mode: boolean;
  beta_features: boolean;
  email_notifications: boolean;
  order_updates: boolean;
  user_registration_alerts: boolean;
  security_alerts: boolean;
  multi_factor_auth: boolean;
  session_timeout: number;
  password_policy: string;
  created_at: string;
  updated_at: string;
}

// Check if environment variables are available
if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
  console.error(
    'Supabase environment variables are missing. Make sure VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY are set in your environment.',
    {
      hasUrl: !!SUPABASE_URL,
      hasKey: !!SUPABASE_ANON_KEY,
      env: import.meta.env.MODE
    }
  );
}

export const supabase = createClient<Database>(
  SUPABASE_URL || '',  // Providing empty string as fallback to prevent runtime errors
  SUPABASE_ANON_KEY || '', // Providing empty string as fallback to prevent runtime errors
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      storageKey: 'lunchwise-auth-token',
      debug: import.meta.env.DEV, // Only enable debug in development
    },
    global: {
      headers: {
        'X-Client-Info': 'lunchwise-app',
      },
    },
    realtime: {
      params: {
        eventsPerSecond: 1,
      },
    },
  }
);

// Clean up any stale auth data in local storage that might cause issues
try {
  if (typeof localStorage !== 'undefined') {
    // Only keep the main storage key as it's handled by the auth mechanism
    const currentSession = localStorage.getItem('lunchwise-auth-token');
    if (!currentSession) {
      localStorage.removeItem('supabase.auth.token');
    }
  }
} catch (error) {
  console.error('Error cleaning up auth storage:', error);
}

// Add an error handler to catch and prevent recursive logging
supabase.auth.onAuthStateChange((event) => {
  console.log('Auth state change:', event);
  
  if (event === 'SIGNED_OUT') {
    // Clear any local storage items that might be causing issues
    try {
      localStorage.removeItem('supabase.auth.token');
      // We keep the main storage key as it's handled by the auth mechanism
    } catch (error) {
      console.error('Error cleaning up auth storage on signout:', error);
    }
  }
});
