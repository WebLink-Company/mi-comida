
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { SUPABASE_URL, SUPABASE_ANON_KEY } from '@/lib/constants';

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Define custom types to handle platform_settings
export type PlatformSettings = {
  id: string;
  provider_id: string | null;
  system_name: string;
  default_language: string;
  dark_mode: boolean;
  beta_features: boolean;
  email_notifications: boolean;
  order_updates: boolean;
  user_registration_alerts: boolean;
  security_alerts: boolean;
  multi_factor_auth: boolean;
  session_timeout: number;
  password_policy: string;
  created_at: string;
  updated_at: string;
}

// Check if environment variables are available
if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
  console.error(
    'Warning: Supabase configuration might be incomplete. Using fallback values.',
    {
      url: SUPABASE_URL,
      hasKey: !!SUPABASE_ANON_KEY,
      env: import.meta.env.MODE
    }
  );
}

console.log('Initializing Supabase client with:', {
  url: SUPABASE_URL,
  hasKey: !!SUPABASE_ANON_KEY,
  mode: import.meta.env.MODE
});

// Create Supabase client
let supabase;

try {
  if (!SUPABASE_URL) {
    throw new Error('SUPABASE_URL is undefined or empty');
  }
  
  if (!SUPABASE_ANON_KEY) {
    throw new Error('SUPABASE_ANON_KEY is undefined or empty');
  }
  
  supabase = createClient<Database>(
    SUPABASE_URL,
    SUPABASE_ANON_KEY,
    {
      auth: {
        persistSession: true,
        autoRefreshToken: true,
        storageKey: 'lunchwise-auth-token',
        debug: import.meta.env.DEV, // Only enable debug in development
      },
      global: {
        headers: {
          'X-Client-Info': 'lunchwise-app',
        },
      },
      realtime: {
        params: {
          eventsPerSecond: 1,
        },
      },
    }
  );

  // Clean up any stale auth data in local storage that might cause issues
  try {
    if (typeof localStorage !== 'undefined') {
      // Only keep the main storage key as it's handled by the auth mechanism
      const currentSession = localStorage.getItem('lunchwise-auth-token');
      if (!currentSession) {
        localStorage.removeItem('supabase.auth.token');
      }
    }
  } catch (error) {
    console.error('Error cleaning up auth storage:', error);
  }

  // Add an error handler to catch and prevent recursive logging
  supabase.auth.onAuthStateChange((event) => {
    console.log('Auth state change:', event);
    
    if (event === 'SIGNED_OUT') {
      // Clear any local storage items that might be causing issues
      try {
        localStorage.removeItem('supabase.auth.token');
        // We keep the main storage key as it's handled by the auth mechanism
      } catch (error) {
        console.error('Error cleaning up auth storage on signout:', error);
      }
    }
  });
} catch (error) {
  console.error('Failed to initialize Supabase client:', error);
  // Create a dummy client that will throw clear errors when used
  const errorMessage = `Supabase initialization failed: ${error instanceof Error ? error.message : 'Unknown error'}`;
  
  // @ts-ignore - Creating a proxy object for better error messages
  supabase = new Proxy({}, {
    get: function(target, prop) {
      if (prop === 'auth' || prop === 'from' || prop === 'storage') {
        return new Proxy({}, {
          get: function() {
            throw new Error(errorMessage);
          }
        });
      }
      throw new Error(errorMessage);
    }
  });
}

// Export the supabase client
export { supabase };
